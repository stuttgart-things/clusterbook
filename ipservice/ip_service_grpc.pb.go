// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: ipservice/ip_service.proto

package clusterbook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IpService_GetIpAddressRange_FullMethodName = "/ipservice.IpService/GetIpAddressRange"
	IpService_SetClusterInfo_FullMethodName    = "/ipservice.IpService/SetClusterInfo"
)

// IpServiceClient is the client API for IpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpServiceClient interface {
	GetIpAddressRange(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*IpResponse, error)
	SetClusterInfo(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error)
}

type ipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpServiceClient(cc grpc.ClientConnInterface) IpServiceClient {
	return &ipServiceClient{cc}
}

func (c *ipServiceClient) GetIpAddressRange(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*IpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IpResponse)
	err := c.cc.Invoke(ctx, IpService_GetIpAddressRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) SetClusterInfo(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterResponse)
	err := c.cc.Invoke(ctx, IpService_SetClusterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpServiceServer is the server API for IpService service.
// All implementations must embed UnimplementedIpServiceServer
// for forward compatibility.
type IpServiceServer interface {
	GetIpAddressRange(context.Context, *IpRequest) (*IpResponse, error)
	SetClusterInfo(context.Context, *ClusterRequest) (*ClusterResponse, error)
	mustEmbedUnimplementedIpServiceServer()
}

// UnimplementedIpServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIpServiceServer struct{}

func (UnimplementedIpServiceServer) GetIpAddressRange(context.Context, *IpRequest) (*IpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpAddressRange not implemented")
}
func (UnimplementedIpServiceServer) SetClusterInfo(context.Context, *ClusterRequest) (*ClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClusterInfo not implemented")
}
func (UnimplementedIpServiceServer) mustEmbedUnimplementedIpServiceServer() {}
func (UnimplementedIpServiceServer) testEmbeddedByValue()                   {}

// UnsafeIpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpServiceServer will
// result in compilation errors.
type UnsafeIpServiceServer interface {
	mustEmbedUnimplementedIpServiceServer()
}

func RegisterIpServiceServer(s grpc.ServiceRegistrar, srv IpServiceServer) {
	// If the following call pancis, it indicates UnimplementedIpServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IpService_ServiceDesc, srv)
}

func _IpService_GetIpAddressRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).GetIpAddressRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpService_GetIpAddressRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).GetIpAddressRange(ctx, req.(*IpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_SetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).SetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpService_SetClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).SetClusterInfo(ctx, req.(*ClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpService_ServiceDesc is the grpc.ServiceDesc for IpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipservice.IpService",
	HandlerType: (*IpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIpAddressRange",
			Handler:    _IpService_GetIpAddressRange_Handler,
		},
		{
			MethodName: "SetClusterInfo",
			Handler:    _IpService_SetClusterInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipservice/ip_service.proto",
}
