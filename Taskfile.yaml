---
version: 3
vars:
  PROJECT_NAME:
    sh: echo ${PWD##*/}
  PROTO_DIR:
    sh: find . -type f -name "*.proto" -exec dirname {} \; | sort | uniq
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD); else echo main ; fi
  ORGA_NAME: stuttgart-things
  MODULE: github.com/{{ .ORGA_NAME }}/{{ .PROJECT_NAME }}
  VERSION: 0.0.1-mvp
  CHART_DIR: helm
  CHART_VERSION:
    sh: grep 'version:' ./{{ .CHART_DIR }}/{{ .PROJECT_NAME }}/Chart.yaml | head -n1 | awk '{ print $2 }'

  DATE:
    sh: date -Ih
  GIT_COMMIT:
    sh: git log -n 1 --format=%h

dotenv: ['.env', '{{.HOME}}/.env']

tasks:
  run:
    desc: Run
    deps: [build]
    cmds:
      - "$GOPATH/bin/{{ .PROJECT_NAME }}"

  run-client:
    desc: Run
    deps: [build]
    cmds:
      - "go run tests/client.go"

  build:
    desc: Install
    deps: [lint, test]
    cmds:
      - go mod tidy
      - go install -ldflags="-X {{ .MODULE }}/internal.version={{ .VERSION }} -X {{ .MODULE }}/internal.date={{ .DATE }} -X {{ .MODULE }}/internal.commit={{ .GIT_COMMIT }}"

  build-ko:
    desc: Build image w/ KO
    deps: [proto, lint, test, commit]
    env:
      KO_DOCKER_REPO: ghcr.io/{{ .ORGA_NAME }}/{{ .PROJECT_NAME }}
    cmds:
      - |
        BUILD_IMAGE=$(ko build {{ .MODULE }} --image-label org.opencontainers.image.source=https://github.com/stuttgart-things/clusterbook --push)
        echo ${BUILD_IMAGE}
        dagger call -m github.com/jpadams/daggerverse/trivy@v0.3.0 scan-image --image-ref ${BUILD_IMAGE}

        # UPDATE HELM CHART
        sed -i "s|^\(\s*image:\s*\).*|\1$(echo ${BUILD_IMAGE} | awk -F':' '{print $1}')|" {{ .CHART_DIR }}/{{ .PROJECT_NAME }}/values.yaml
        sed -i "s|^\(\s*tag:\s*\).*|\1$(echo ${BUILD_IMAGE} | awk -F':' '{print $2}')|" {{ .CHART_DIR }}//{{ .PROJECT_NAME }}/values.yaml

  proto:
    desc: Generate Go code from proto
    cmds:
      - protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative {{ .PROTO_DIR }}/*.proto

  lint:
    desc: Lint Golang
    cmds:
      - cmd: golangci-lint run
        ignore_error: true

  dagger-lint:
    desc: Lint Golang w/ dagger
    cmds:
      - dagger -m github.com/purpleclay/daggerverse/golang@1190a20046659b68001a6e16cd5c12fab960b216 call  --src . lint

  dagger-build:
    desc: Build Golang w/ dagger
    cmds:
      - dagger call -m github.com/felipecruz91/daggerverse/go build --source . --goVersion 1.23.1 -o build/

  format:
    desc: Format Golang
    cmds:
      - dagger call -m github.com/purpleclay/daggerverse/golang@1190a20046659b68001a6e16cd5c12fab960b216 --src . format export --path .

  test:
    desc: Test code
    cmds:
      - go mod tidy
      - cmd: go test ./... -v

  commit:
    desc: Commit + push code into branch
    cmds:
      - rm -rf dist/
      - git branch --set-upstream-to=origin/{{ .BRANCH }}
      - git pull
      - |
        git add *
        if [[ -n $(git status --porcelain) ]]; then
          echo "ENTER COMMIT MESSAGE"
          read COMMIT_MESSAGE;
          echo "COMMITTING CHANGES"
          git commit --allow-empty -a -m "$(echo ${COMMIT_MESSAGE})"
        else
          echo "NO CHANGES"
        fi
        git push origin -u {{ .BRANCH }}

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch
      - git branch --set-upstream-to=origin/main ${BRANCH_NAME}

  pr:
    desc: Create pull request into main
    deps:
      - dagger-lint
      - dagger-build
    cmds:
      - task: commit
      - gh pr create -t "{{ .BRANCH }}" -b "{{ .BRANCH }} branch into main"
      - sleep 20s
      - gh pr checks $(gh pr list | grep "^[^#;]" | awk '{print $1}') --watch
      - gh pr merge $(gh pr list | grep "^[^#;]" | awk '{print $1}') --auto --rebase --delete-branch
      - git checkout main && git pull